                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f48003000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f6d802000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7a802000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
                            | 
                            | # while 1
0x034: 202e                 | 	rrmovq %rdx, %r14
0x036: c0fefaffffffffffffff | 	iaddq $-6, %r14     # len < 6
0x040: 727201000000000000   | 	jl Done1            # if so, goto Done1
0x049:                      | Loop1:
0x049: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x053: 40a60000000000000000 | 	rmmovq %r10, (%rsi) # src -> dst
0x05d: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11
0x067: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi) # src -> dst
0x071: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12
0x07b: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi) # src -> dst
0x085: 50d71800000000000000 | 	mrmovq 24(%rdi), %r13
0x08f: 40d61800000000000000 | 	rmmovq %r13, 24(%rsi) # src -> dst
0x099: 50872000000000000000 | 	mrmovq 32(%rdi), %r8
0x0a3: 40862000000000000000 | 	rmmovq %r8, 32(%rsi) # src -> dst
0x0ad: 50972800000000000000 | 	mrmovq 40(%rdi), %r9
0x0b7: 40962800000000000000 | 	rmmovq %r9, 40(%rsi) # src -> dst
                            | 
0x0c1: c0f73000000000000000 | 	iaddq $48, %rdi     # src += 6
0x0cb: c0f63000000000000000 | 	iaddq $48, %rsi     # dst += 6
                            | 
0x0d5: 62aa                 | 	andq %r10, %r10		# val1 <= 0?
0x0d7: 71ea00000000000000   | 	jle AddCount1		# if so, goto AddCount1
0x0e0: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0ea:                      | AddCount1:
0x0ea: 62bb                 | 	andq %r11, %r11		# val2 <= 0?
0x0ec: 71ff00000000000000   | 	jle AddCount2		# if so, goto AddCount2
0x0f5: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0ff:                      | AddCount2:
0x0ff: 62cc                 | 	andq %r12, %r12		# val3 <= 0?
0x101: 711401000000000000   | 	jle AddCount3		# if so, goto AddCount3
0x10a: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x114:                      | AddCount3:
0x114: 62dd                 | 	andq %r13, %r13		# val4 <= 0?
0x116: 712901000000000000   | 	jle AddCount4		# if so, goto AddCount4
0x11f: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x129:                      | AddCount4:
0x129: 6288                 | 	andq %r8, %r8		# val5 <= 0?
0x12b: 713e01000000000000   | 	jle AddCount5		# if so, goto AddCount5
0x134: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x13e:                      | AddCount5:
0x13e: 6299                 | 	andq %r9, %r9		# val6 <= 0?
0x140: 715301000000000000   | 	jle AddCount6		# if so, goto AddCount6
0x149: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x153:                      | AddCount6:
                            | 
0x153: c0f2faffffffffffffff | 	iaddq $-6, %rdx     # len -= 6
0x15d: 202e                 | 	rrmovq %rdx, %r14
0x15f: c0fefaffffffffffffff | 	iaddq $-6, %r14     # len >= 6
0x169: 754900000000000000   | 	jge Loop1 			# if so, goto Loop1
0x172:                      | Done1:
                            | 
                            | # while 2
0x172: 202e                 | 	rrmovq %rdx, %r14
0x174: c0fefdffffffffffffff | 	iaddq $-3, %r14     # len < 3
0x17e: 723502000000000000   | 	jl Done2            # if so, goto Done1
0x187:                      | Loop2:
0x187: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x191: 40a60000000000000000 | 	rmmovq %r10, (%rsi) # src -> dst
0x19b: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11
0x1a5: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi) # src -> dst
0x1af: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12
0x1b9: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi) # src -> dst
                            | 
0x1c3: c0f71800000000000000 | 	iaddq $24, %rdi     # src += 3
0x1cd: c0f61800000000000000 | 	iaddq $24, %rsi     # dst += 3
                            | 
0x1d7: 62aa                 | 	andq %r10, %r10		# val1 <= 0?
0x1d9: 71ec01000000000000   | 	jle AddCount1s		# if so, goto AddCount1s
0x1e2: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x1ec:                      | AddCount1s:
0x1ec: 62bb                 | 	andq %r11, %r11		# val2 <= 0?
0x1ee: 710102000000000000   | 	jle AddCount2s		# if so, goto AddCount2s
0x1f7: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x201:                      | AddCount2s:
0x201: 62cc                 | 	andq %r12, %r12		# val3 <= 0?
0x203: 711602000000000000   | 	jle AddCount3s		# if so, goto AddCount3s
0x20c: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x216:                      | AddCount3s:
                            | 
0x216: c0f2fdffffffffffffff | 	iaddq $-3, %rdx     # len -= 3
0x220: 202e                 | 	rrmovq %rdx, %r14
0x222: c0fefdffffffffffffff | 	iaddq $-3, %r14     # len >= 3
0x22c: 758701000000000000   | 	jge Loop2 			# if so, goto Loop1
0x235:                      | Done2:
                            | 
                            | # Last 3 elements
0x235: 6222                 | 	andq %rdx,%rdx		# len == 0
0x237: 73a502000000000000   | 	je Done				# if so, goto Done:
0x240: c0f2ffffffffffffffff | 	iaddq $-1, %rdx     # len == 1
0x24a: 737c02000000000000   | 	je case1
0x253: 50a70800000000000000 | 	mrmovq 8(%rdi), %r10
0x25d: 40a60800000000000000 | 	rmmovq %r10, 8(%rsi) # src -> dst
0x267: 62aa                 | 	andq %r10, %r10		# val1 <= 0?
0x269: 717c02000000000000   | 	jle AddCount1t		# if so, goto AddCount1t
0x272: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x27c:                      | AddCount1t:
0x27c:                      | case1:
0x27c: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x286: 40b60000000000000000 | 	rmmovq %r11, (%rsi) # src -> dst
0x290: 62bb                 | 	andq %r11, %r11		# val2 <= 0?
0x292: 71a502000000000000   | 	jle AddCount2t		# if so, goto AddCount2t
0x29b: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x2a5:                      | AddCount2t:
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x2a5:                      | Done:
0x2a5: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x2a6:                      | End:
                            | #/* $end ncopy-ys */
0x2a6:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x2a8:                      | 	.align 8
0x2a8:                      | src:
0x2a8: 0100000000000000     | 	.quad 1
0x2b0: 0200000000000000     | 	.quad 2
0x2b8: fdffffffffffffff     | 	.quad -3
0x2c0: fcffffffffffffff     | 	.quad -4
0x2c8: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x2d0:                      | 	.align 16
0x2d0:                      | Predest:
0x2d0: fadebc0000000000     | 	.quad 0xbcdefa
0x2d8:                      | dest:
0x2d8: abefcd0000000000     | 	.quad 0xcdefab
0x2e0: abefcd0000000000     | 	.quad 0xcdefab
0x2e8: abefcd0000000000     | 	.quad 0xcdefab
0x2f0: abefcd0000000000     | 	.quad 0xcdefab
0x2f8:                      | Postdest:
0x2f8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x300:                      | .align 8
                            | # Run time stack
0x300: 0000000000000000     | 	.quad 0
0x308: 0000000000000000     | 	.quad 0
0x310: 0000000000000000     | 	.quad 0
0x318: 0000000000000000     | 	.quad 0
0x320: 0000000000000000     | 	.quad 0
0x328: 0000000000000000     | 	.quad 0
0x330: 0000000000000000     | 	.quad 0
0x338: 0000000000000000     | 	.quad 0
0x340: 0000000000000000     | 	.quad 0
0x348: 0000000000000000     | 	.quad 0
0x350: 0000000000000000     | 	.quad 0
0x358: 0000000000000000     | 	.quad 0
0x360: 0000000000000000     | 	.quad 0
0x368: 0000000000000000     | 	.quad 0
0x370: 0000000000000000     | 	.quad 0
0x378: 0000000000000000     | 	.quad 0
                            | 
0x380:                      | Stack:
