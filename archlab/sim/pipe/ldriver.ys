#######################################################################
# Test for copying block of size 63;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $63, %rdx		# src and dst have 63 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;

# while 1
	rrmovq %rdx, %r14
	iaddq $-6, %r14     # len < 6
	jl Done1            # if so, goto Done1
Loop1:
	mrmovq (%rdi), %r10
	rmmovq %r10, (%rsi) # src -> dst
	mrmovq 8(%rdi), %r11
	rmmovq %r11, 8(%rsi) # src -> dst
	mrmovq 16(%rdi), %r12
	rmmovq %r12, 16(%rsi) # src -> dst
	mrmovq 24(%rdi), %r13
	rmmovq %r13, 24(%rsi) # src -> dst
	mrmovq 32(%rdi), %r8
	rmmovq %r8, 32(%rsi) # src -> dst
	mrmovq 40(%rdi), %r9
	rmmovq %r9, 40(%rsi) # src -> dst

	iaddq $48, %rdi     # src += 6
	iaddq $48, %rsi     # dst += 6

	andq %r10, %r10		# val1 <= 0?
	jle AddCount1		# if so, goto AddCount1
	iaddq $1, %rax		# count++
AddCount1:
	andq %r11, %r11		# val2 <= 0?
	jle AddCount2		# if so, goto AddCount2
	iaddq $1, %rax		# count++
AddCount2:
	andq %r12, %r12		# val3 <= 0?
	jle AddCount3		# if so, goto AddCount3
	iaddq $1, %rax		# count++
AddCount3:
	andq %r13, %r13		# val4 <= 0?
	jle AddCount4		# if so, goto AddCount4
	iaddq $1, %rax		# count++
AddCount4:
	andq %r8, %r8		# val5 <= 0?
	jle AddCount5		# if so, goto AddCount5
	iaddq $1, %rax		# count++
AddCount5:
	andq %r9, %r9		# val6 <= 0?
	jle AddCount6		# if so, goto AddCount6
	iaddq $1, %rax		# count++
AddCount6:

	iaddq $-6, %rdx     # len -= 6
	rrmovq %rdx, %r14
	iaddq $-6, %r14     # len >= 6
	jge Loop1 			# if so, goto Loop1
Done1:

# while 2
	rrmovq %rdx, %r14
	iaddq $-3, %r14     # len < 3
	jl Done2            # if so, goto Done1
Loop2:
	mrmovq (%rdi), %r10
	rmmovq %r10, (%rsi) # src -> dst
	mrmovq 8(%rdi), %r11
	rmmovq %r11, 8(%rsi) # src -> dst
	mrmovq 16(%rdi), %r12
	rmmovq %r12, 16(%rsi) # src -> dst

	iaddq $24, %rdi     # src += 3
	iaddq $24, %rsi     # dst += 3

	andq %r10, %r10		# val1 <= 0?
	jle AddCount1s		# if so, goto AddCount1s
	iaddq $1, %rax		# count++
AddCount1s:
	andq %r11, %r11		# val2 <= 0?
	jle AddCount2s		# if so, goto AddCount2s
	iaddq $1, %rax		# count++
AddCount2s:
	andq %r12, %r12		# val3 <= 0?
	jle AddCount3s		# if so, goto AddCount3s
	iaddq $1, %rax		# count++
AddCount3s:

	iaddq $-3, %rdx     # len -= 3
	rrmovq %rdx, %r14
	iaddq $-3, %r14     # len >= 3
	jge Loop2 			# if so, goto Loop1
Done2:

# Last 3 elements
	andq %rdx,%rdx		# len == 0
	je Done				# if so, goto Done:
	iaddq $-1, %rdx     # len == 1
	je case1
	mrmovq 8(%rdi), %r10
	rmmovq %r10, 8(%rsi) # src -> dst
	andq %r10, %r10		# val1 <= 0?
	jle AddCount1t		# if so, goto AddCount1t
	iaddq $1, %rax		# count++
AddCount1t:
case1:
	mrmovq (%rdi), %r10
	rmmovq %r11, (%rsi) # src -> dst
	andq %r11, %r11		# val2 <= 0?
	jle AddCount2t		# if so, goto AddCount2t
	iaddq $1, %rax		# count++
AddCount2t:


##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 1
	.quad 2
	.quad -3
	.quad -4
	.quad -5
	.quad -6
	.quad -7
	.quad 8
	.quad 9
	.quad 10
	.quad 11
	.quad 12
	.quad -13
	.quad 14
	.quad 15
	.quad 16
	.quad 17
	.quad -18
	.quad 19
	.quad -20
	.quad -21
	.quad 22
	.quad -23
	.quad -24
	.quad -25
	.quad 26
	.quad -27
	.quad 28
	.quad -29
	.quad 30
	.quad 31
	.quad -32
	.quad 33
	.quad 34
	.quad 35
	.quad 36
	.quad -37
	.quad 38
	.quad 39
	.quad -40
	.quad -41
	.quad -42
	.quad -43
	.quad 44
	.quad 45
	.quad 46
	.quad 47
	.quad -48
	.quad 49
	.quad -50
	.quad 51
	.quad 52
	.quad 53
	.quad -54
	.quad -55
	.quad -56
	.quad -57
	.quad -58
	.quad -59
	.quad -60
	.quad -61
	.quad -62
	.quad -63
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
