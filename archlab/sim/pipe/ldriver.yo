                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f43807000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f6b804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7a802000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
                            | 
                            | # while 1
0x034: 202e                 | 	rrmovq %rdx, %r14
0x036: c0fefaffffffffffffff | 	iaddq $-6, %r14     # len < 6
0x040: 727201000000000000   | 	jl Done1            # if so, goto Done1
0x049:                      | Loop1:
0x049: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x053: 40a60000000000000000 | 	rmmovq %r10, (%rsi) # src -> dst
0x05d: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11
0x067: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi) # src -> dst
0x071: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12
0x07b: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi) # src -> dst
0x085: 50d71800000000000000 | 	mrmovq 24(%rdi), %r13
0x08f: 40d61800000000000000 | 	rmmovq %r13, 24(%rsi) # src -> dst
0x099: 50872000000000000000 | 	mrmovq 32(%rdi), %r8
0x0a3: 40862000000000000000 | 	rmmovq %r8, 32(%rsi) # src -> dst
0x0ad: 50972800000000000000 | 	mrmovq 40(%rdi), %r9
0x0b7: 40962800000000000000 | 	rmmovq %r9, 40(%rsi) # src -> dst
                            | 
0x0c1: c0f73000000000000000 | 	iaddq $48, %rdi     # src += 6
0x0cb: c0f63000000000000000 | 	iaddq $48, %rsi     # dst += 6
                            | 
0x0d5: 62aa                 | 	andq %r10, %r10		# val1 <= 0?
0x0d7: 71ea00000000000000   | 	jle AddCount1		# if so, goto AddCount1
0x0e0: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0ea:                      | AddCount1:
0x0ea: 62bb                 | 	andq %r11, %r11		# val2 <= 0?
0x0ec: 71ff00000000000000   | 	jle AddCount2		# if so, goto AddCount2
0x0f5: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0ff:                      | AddCount2:
0x0ff: 62cc                 | 	andq %r12, %r12		# val3 <= 0?
0x101: 711401000000000000   | 	jle AddCount3		# if so, goto AddCount3
0x10a: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x114:                      | AddCount3:
0x114: 62dd                 | 	andq %r13, %r13		# val4 <= 0?
0x116: 712901000000000000   | 	jle AddCount4		# if so, goto AddCount4
0x11f: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x129:                      | AddCount4:
0x129: 6288                 | 	andq %r8, %r8		# val5 <= 0?
0x12b: 713e01000000000000   | 	jle AddCount5		# if so, goto AddCount5
0x134: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x13e:                      | AddCount5:
0x13e: 6299                 | 	andq %r9, %r9		# val6 <= 0?
0x140: 715301000000000000   | 	jle AddCount6		# if so, goto AddCount6
0x149: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x153:                      | AddCount6:
                            | 
0x153: c0f2faffffffffffffff | 	iaddq $-6, %rdx     # len -= 6
0x15d: 202e                 | 	rrmovq %rdx, %r14
0x15f: c0fefaffffffffffffff | 	iaddq $-6, %r14     # len >= 6
0x169: 754900000000000000   | 	jge Loop1 			# if so, goto Loop1
0x172:                      | Done1:
                            | 
                            | # while 2
0x172: 202e                 | 	rrmovq %rdx, %r14
0x174: c0fefdffffffffffffff | 	iaddq $-3, %r14     # len < 3
0x17e: 723502000000000000   | 	jl Done2            # if so, goto Done1
0x187:                      | Loop2:
0x187: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x191: 40a60000000000000000 | 	rmmovq %r10, (%rsi) # src -> dst
0x19b: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11
0x1a5: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi) # src -> dst
0x1af: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12
0x1b9: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi) # src -> dst
                            | 
0x1c3: c0f71800000000000000 | 	iaddq $24, %rdi     # src += 3
0x1cd: c0f61800000000000000 | 	iaddq $24, %rsi     # dst += 3
                            | 
0x1d7: 62aa                 | 	andq %r10, %r10		# val1 <= 0?
0x1d9: 71ec01000000000000   | 	jle AddCount1s		# if so, goto AddCount1s
0x1e2: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x1ec:                      | AddCount1s:
0x1ec: 62bb                 | 	andq %r11, %r11		# val2 <= 0?
0x1ee: 710102000000000000   | 	jle AddCount2s		# if so, goto AddCount2s
0x1f7: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x201:                      | AddCount2s:
0x201: 62cc                 | 	andq %r12, %r12		# val3 <= 0?
0x203: 711602000000000000   | 	jle AddCount3s		# if so, goto AddCount3s
0x20c: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x216:                      | AddCount3s:
                            | 
0x216: c0f2fdffffffffffffff | 	iaddq $-3, %rdx     # len -= 3
0x220: 202e                 | 	rrmovq %rdx, %r14
0x222: c0fefdffffffffffffff | 	iaddq $-3, %r14     # len >= 3
0x22c: 758701000000000000   | 	jge Loop2 			# if so, goto Loop1
0x235:                      | Done2:
                            | 
                            | # Last 3 elements
0x235: 6222                 | 	andq %rdx,%rdx		# len == 0
0x237: 73a502000000000000   | 	je Done				# if so, goto Done:
0x240: c0f2ffffffffffffffff | 	iaddq $-1, %rdx     # len == 1
0x24a: 737c02000000000000   | 	je case1
0x253: 50a70800000000000000 | 	mrmovq 8(%rdi), %r10
0x25d: 40a60800000000000000 | 	rmmovq %r10, 8(%rsi) # src -> dst
0x267: 62aa                 | 	andq %r10, %r10		# val1 <= 0?
0x269: 717c02000000000000   | 	jle AddCount1t		# if so, goto AddCount1t
0x272: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x27c:                      | AddCount1t:
0x27c:                      | case1:
0x27c: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x286: 40b60000000000000000 | 	rmmovq %r11, (%rsi) # src -> dst
0x290: 62bb                 | 	andq %r11, %r11		# val2 <= 0?
0x292: 71a502000000000000   | 	jle AddCount2t		# if so, goto AddCount2t
0x29b: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x2a5:                      | AddCount2t:
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x2a5:                      | Done:
0x2a5: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x2a6:                      | End:
                            | #/* $end ncopy-ys */
0x2a6:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x2a8:                      | 	.align 8
0x2a8:                      | src:
0x2a8: 0100000000000000     | 	.quad 1
0x2b0: 0200000000000000     | 	.quad 2
0x2b8: fdffffffffffffff     | 	.quad -3
0x2c0: fcffffffffffffff     | 	.quad -4
0x2c8: fbffffffffffffff     | 	.quad -5
0x2d0: faffffffffffffff     | 	.quad -6
0x2d8: f9ffffffffffffff     | 	.quad -7
0x2e0: 0800000000000000     | 	.quad 8
0x2e8: 0900000000000000     | 	.quad 9
0x2f0: 0a00000000000000     | 	.quad 10
0x2f8: 0b00000000000000     | 	.quad 11
0x300: 0c00000000000000     | 	.quad 12
0x308: f3ffffffffffffff     | 	.quad -13
0x310: 0e00000000000000     | 	.quad 14
0x318: 0f00000000000000     | 	.quad 15
0x320: 1000000000000000     | 	.quad 16
0x328: 1100000000000000     | 	.quad 17
0x330: eeffffffffffffff     | 	.quad -18
0x338: 1300000000000000     | 	.quad 19
0x340: ecffffffffffffff     | 	.quad -20
0x348: ebffffffffffffff     | 	.quad -21
0x350: 1600000000000000     | 	.quad 22
0x358: e9ffffffffffffff     | 	.quad -23
0x360: e8ffffffffffffff     | 	.quad -24
0x368: e7ffffffffffffff     | 	.quad -25
0x370: 1a00000000000000     | 	.quad 26
0x378: e5ffffffffffffff     | 	.quad -27
0x380: 1c00000000000000     | 	.quad 28
0x388: e3ffffffffffffff     | 	.quad -29
0x390: 1e00000000000000     | 	.quad 30
0x398: 1f00000000000000     | 	.quad 31
0x3a0: e0ffffffffffffff     | 	.quad -32
0x3a8: 2100000000000000     | 	.quad 33
0x3b0: 2200000000000000     | 	.quad 34
0x3b8: 2300000000000000     | 	.quad 35
0x3c0: 2400000000000000     | 	.quad 36
0x3c8: dbffffffffffffff     | 	.quad -37
0x3d0: 2600000000000000     | 	.quad 38
0x3d8: 2700000000000000     | 	.quad 39
0x3e0: d8ffffffffffffff     | 	.quad -40
0x3e8: d7ffffffffffffff     | 	.quad -41
0x3f0: d6ffffffffffffff     | 	.quad -42
0x3f8: d5ffffffffffffff     | 	.quad -43
0x400: 2c00000000000000     | 	.quad 44
0x408: 2d00000000000000     | 	.quad 45
0x410: 2e00000000000000     | 	.quad 46
0x418: 2f00000000000000     | 	.quad 47
0x420: d0ffffffffffffff     | 	.quad -48
0x428: 3100000000000000     | 	.quad 49
0x430: ceffffffffffffff     | 	.quad -50
0x438: 3300000000000000     | 	.quad 51
0x440: 3400000000000000     | 	.quad 52
0x448: 3500000000000000     | 	.quad 53
0x450: caffffffffffffff     | 	.quad -54
0x458: c9ffffffffffffff     | 	.quad -55
0x460: c8ffffffffffffff     | 	.quad -56
0x468: c7ffffffffffffff     | 	.quad -57
0x470: c6ffffffffffffff     | 	.quad -58
0x478: c5ffffffffffffff     | 	.quad -59
0x480: c4ffffffffffffff     | 	.quad -60
0x488: c3ffffffffffffff     | 	.quad -61
0x490: c2ffffffffffffff     | 	.quad -62
0x498: c1ffffffffffffff     | 	.quad -63
0x4a0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x4b0:                      | 	.align 16
0x4b0:                      | Predest:
0x4b0: fadebc0000000000     | 	.quad 0xbcdefa
0x4b8:                      | dest:
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0:                      | Postdest:
0x6b0: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x6b8:                      | .align 8
                            | # Run time stack
0x6b8: 0000000000000000     | 	.quad 0
0x6c0: 0000000000000000     | 	.quad 0
0x6c8: 0000000000000000     | 	.quad 0
0x6d0: 0000000000000000     | 	.quad 0
0x6d8: 0000000000000000     | 	.quad 0
0x6e0: 0000000000000000     | 	.quad 0
0x6e8: 0000000000000000     | 	.quad 0
0x6f0: 0000000000000000     | 	.quad 0
0x6f8: 0000000000000000     | 	.quad 0
0x700: 0000000000000000     | 	.quad 0
0x708: 0000000000000000     | 	.quad 0
0x710: 0000000000000000     | 	.quad 0
0x718: 0000000000000000     | 	.quad 0
0x720: 0000000000000000     | 	.quad 0
0x728: 0000000000000000     | 	.quad 0
0x730: 0000000000000000     | 	.quad 0
                            | 
0x738:                      | Stack:
